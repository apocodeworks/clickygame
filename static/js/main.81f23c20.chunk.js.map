{"version":3,"sources":["components/Header/index.js","components/Board/index.js","image.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Fragment","className","message","score","total","Board","class","id","images","map","image","src","url","alt","key","index","onClick","clickHandler","App","state","clicked","handleClickById","imageId","_this","slice","findIndex","item","push","setState","sort","Math","random","console","log","components_Header","this","length","components_Board","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaiBA,MAXjB,SAAgBC,GACZ,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,cACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,+BACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWL,EAAMM,SAChCL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAAf,SAA8BL,EAAMO,MAApC,OAA+CP,EAAMQ,QAErDP,EAAAC,EAAAC,cAAA,aCMKM,MAZjB,SAAeT,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKO,MAAM,aAChBT,EAAAC,EAAAC,cAAA,OAAKQ,GAAG,SACLX,EAAMY,OAAOC,IAAI,SAAAC,GAAK,OACrBb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAAEH,EAAAC,EAAAC,cAAA,OAAKY,IAAKD,EAAME,IAAKC,IAAI,OAAOZ,UAAU,QAAQM,GAAI,SAAWG,EAAOI,IAAKJ,EAAMK,MAAOC,QAAS,WAAOpB,EAAMqB,aAAaP,EAAMK,gBCShIP,EAff,CACI,CAACI,IAAK,yGAA0GG,MAAO,GACvH,CAACH,IAAK,iHAAkHG,MAAO,GAC/H,CAACH,IAAK,2GAA4GG,MAAO,GACzH,CAACH,IAAK,2DAA4DG,MAAO,GACzE,CAACH,IAAK,iIAAkIG,MAAO,GAC/I,CAACH,IAAK,qFAAsFG,MAAO,GACnG,CAACH,IAAK,6GAA8GG,MAAO,GAC3H,CAACH,IAAK,+CAAgDG,MAAO,GAC7D,CAACH,IAAK,sGAAuGG,MAAO,GACpH,CAACH,IAAK,2DAA4DG,MAAO,KCgD9DG,6MAnDbC,MAAQ,CACNjB,QAAW,uEACXC,MAAS,EACTK,OAAUA,EACVY,QAAW,MAGbC,gBAAkB,SAACC,GACjB,IAAIF,EAAUG,EAAKJ,MAAMC,QAAQI,MAAM,IAGc,IAAjDJ,EAAQK,UAAU,SAAAC,GAAI,OAAIJ,IAAYI,KACxCN,EAAQO,KAAKL,GACbC,EAAKK,SAAS,CACZR,QAAWA,EACXjB,MAASoB,EAAKJ,MAAMhB,MAAQ,EAC5BD,QAAW,wCAIbqB,EAAKK,SAAS,CACZ1B,QAAW,8CACXC,MAAS,EACTiB,QAAW,KAIf,IAAIZ,EAASe,EAAKJ,MAAMX,OAAOgB,MAAM,GACrChB,EAAOqB,KAAK,kBAAMC,KAAKC,SAAW,KAClCR,EAAKK,SAAS,CAACpB,WACfwB,QAAQC,IAAI,qFAKZ,OACEpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACmC,EAAD,CACAhC,QAASiC,KAAKhB,MAAMjB,QACpBC,MAAOgC,KAAKhB,MAAMhB,MAClBC,MAAO+B,KAAKhB,MAAMX,OAAO4B,SACzBvC,EAAAC,EAAAC,cAACsC,EAAD,CACE7B,OAAQ2B,KAAKhB,MAAMX,OACnBS,aAAckB,KAAKd,0BA7CXiB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.81f23c20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return <>\r\n            <header>\r\n            <div className=\"title\">Memories of the Underground</div>\r\n            <div className=\"message\">{props.message}</div>\r\n            <div className=\"score\">Score {props.score} of {props.total}</div>\r\n            </header>\r\n            <br/>\r\n        </>\r\n  }\r\n  \r\n  export default Header;","import React from 'react';\r\n\r\n\r\nfunction Board(props) {\r\n    return <div class=\"container\">\r\n      <div id=\"board\">\r\n        {props.images.map(image => (\r\n          <><img src={image.url} alt=\"test\" className=\"image\" id={\"image-\" + image} key={image.index} onClick={() => {props.clickHandler(image.index)}} ></img>\r\n          </>\r\n\r\n        ))}\r\n    </div>\r\n    </div>\r\n  }\r\n  \r\n  export default Board;","const images = \r\n[\r\n    {url: \"https://vignette.wikia.nocookie.net/undertale/images/0/01/Toriel.png/revision/latest?cb=20151013235609\", index: 1},\r\n    {url: \"https://vignette.wikia.nocookie.net/sonicfanchara/images/a/a0/Sans_shrug.png/revision/latest?cb=20170409223803\", index: 2},\r\n    {url: \"https://vignette.wikia.nocookie.net/undertale/images/2/21/Papyrus1.PNG/revision/latest?cb=20181111152827\", index: 3},\r\n    {url: \"https://static.tvtropes.org/pmwiki/pub/images/image5.png\", index: 4},\r\n    {url: \"https://vignette.wikia.nocookie.net/undertale/images/4/4b/Alphys.png/revision/latest/scale-to-width-down/128?cb=20160209204242\", index: 5},\r\n    {url: \"https://static.comicvine.com/uploads/original/11122/111225835/4878618-mettaton.png\", index: 6},\r\n    {url: \"https://vignette.wikia.nocookie.net/undertale/images/f/f1/Untitled-3.png/revision/latest?cb=20151228183442\", index: 7},\r\n    {url: \"https://art.pixilart.com/a25c691c0972d55.png\", index: 8},\r\n    {url: \"https://vignette.wikia.nocookie.net/undertale/images/0/08/Gr8.png/revision/latest?cb=20160206211253\", index: 9},\r\n    {url: \"https://static.tvtropes.org/pmwiki/pub/images/image2.png\", index: 10}\r\n\r\n]\r\n\r\n\r\nexport default images;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Board from \"./components/Board\";\nimport images from './image'\n\nclass App extends Component {\n\n  state = {\n    \"message\": \"You wouldn't forget your friends, would you? Click an image to start\",\n    \"score\": 0,\n    \"images\": images,\n    \"clicked\": []\n  };\n\n  handleClickById = (imageId) => {\n    let clicked = this.state.clicked.slice(0);\n\n    // has this image been clicked before?\n    if (clicked.findIndex(item => imageId === item) === -1){\n      clicked.push(imageId);\n      this.setState({\n        \"clicked\": clicked,\n        \"score\": this.state.score + 1,\n        \"message\": \"You are filled with determination.\"\n      })\n    } else {\n      // game end/restart\n      this.setState({\n        \"message\": \"Don't give up! You have to stay determined.\",\n        \"score\": 0,\n        \"clicked\": []\n      })\n    }\n    // image shuffler\n    let images = this.state.images.slice(0);\n    images.sort(() => Math.random() - 0.5);\n    this.setState({images});\n    console.log(\"clicked!\")\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n        message={this.state.message}\n        score={this.state.score}\n        total={this.state.images.length} />\n        <Board \n          images={this.state.images}\n          clickHandler={this.handleClickById}\n        />\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}